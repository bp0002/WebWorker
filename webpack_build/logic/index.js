!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);class n{static sin(t){return Math.sin(t)}static cos(t){return Math.cos(t)}static isPrimeNumber(t){if(t<2)return!1;for(let e=2;e<=t-1;e++)if(t%e==0)return!1;return!0}static nextPowerOfTwo(t){return--t,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,t|=t>>16,++t}}n.polarCoordToCartesian=t=>({x:Math.cos(t)*t,y:Math.sin(t)*t});const o={};self.onmessage=t=>{const e=t.data,r=e.CMD;switch(r){case"INIT":o.canvas=e.canvas,o.width=e.canvas.width,o.height=e.canvas.height,o.ready=!0,o.context2D=e.canvas.getContext("2d"),c();break;case"RENDER":break;default:console.warn("no such cms: ",r)}};let a=0;const c=()=>{o.ready&&u(o),requestAnimationFrame(c)};let i=0,s=0;const u=t=>{t.context2D.save();for(let e=0;e<1e3;e++)++a===i+s&&(l(a,t.context2D,t.width,t.height),i=s,s=a);t.context2D.restore()},l=(t,e,r,o)=>{let{x:a,y:c}=n.polarCoordToCartesian(t);a=r/2+a/100,c=o/2+c/100,e.fillStyle="#0000FF",e.fillRect(a-1,c-1,2,2)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,